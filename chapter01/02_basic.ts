//类型声明

//--------------------
//使用 JS 的语法声明变量
let a;

a = 123; 
a = '巴御前';

//使用 TS 的语法在声明变量时声明类型
let b: string;

b = '巴御前天下第一';
// b = 123; //报错 - 不能将类型“number”分配给类型“string”

//--------------------
//如果需要声明和赋值同时进行
let c : boolean = false;
c = true;
// c = 1; //不能将类型“number”分配给类型“boolean”

//TS 优化：当声明和赋值同时进行时，类型声明可以不写，TS 会自动推断
let d = '巴御前天下第一';
// d = {}; //不能将类型“{}”分配给类型“string”

//---------------------
/* 
JS 中的函数是不考虑参数的类型和个数的
TS 中可以在形参后面加上对应的类型，限制调用函数时传入的实参类型
*/
function sum(a: number,b: number){
    return a + b;
}

// sum(123); //TS 函数调用提示：应有 2 个参数，但获得 1 个。ts(2554)
// sum(123,456,789); //TS 函数调用提示：应有 2 个参数，但获得 3 个。ts(2554)
// sum("123","456"); //TS 函数调用提示：类型“string”的参数不能赋给类型“number”的参数。ts(2345)

//----------------------
//TS 中的函数也可以限制函数的返回值类型
function pow(a: number,b: number):number{
    //不写返回值会报错
    //返回值类型错误会报错
    // return 'why';
    return a ** b;
}

//用来接收返回值的变量会自动进行类型推断
let result = pow(4,2);
// result = ''; //不能将类型“string”分配给类型“number”